#!/usr/bin/env node

/**
 * Ê£ÄÊü•Ëé±ÊÅ©Â∑•‰ΩúÊµÅ‰∏≠ÁöÑNoteËäÇÁÇπÂºïÁî®ÈóÆÈ¢ò
 */

const fs = require('fs').promises;
const path = require('path');

async function checkLayneWorkflowNodes() {
    try {
        console.log('=== Ê£ÄÊü•Ëé±ÊÅ©Â∑•‰ΩúÊµÅËäÇÁÇπÂºïÁî®ÈóÆÈ¢ò ===\n');
        
        // ËØªÂèñËé±ÊÅ©Â∑•‰ΩúÊµÅ
        const workflowPath = path.join(__dirname, 'workflows', 'Ëé±ÊÅ©ÊñáÁîüÂõæÂÖ®ÂäüËÉΩÊ®°ÁªÑ.json');
        const content = await fs.readFile(workflowPath, 'utf-8');
        const workflow = JSON.parse(content);
        
        console.log('üìã Â∑•‰ΩúÊµÅÁªìÊûÑÂàÜÊûê:');
        console.log('- ÊúânodesÊï∞ÁªÑ:', !!workflow.nodes);
        console.log('- ÊúâpromptÂØπË±°:', !!workflow.prompt);
        console.log('- ËäÇÁÇπÊÄªÊï∞:', workflow.nodes?.length || 0);
        
        if (workflow.nodes) {
            // Êü•ÊâæÊâÄÊúâËäÇÁÇπÁ±ªÂûã
            const nodeTypes = new Set();
            const nodeIds = new Set();
            
            workflow.nodes.forEach(node => {
                nodeTypes.add(node.type);
                nodeIds.add(node.id);
            });
            
            console.log('\nüìä ËäÇÁÇπÁ±ªÂûãÁªüËÆ°:');
            Array.from(nodeTypes).sort().forEach(type => {
                const count = workflow.nodes.filter(n => n.type === type).length;
                console.log(`  ${type}: ${count}`);
            });
            
            console.log('\nüîç Êü•ÊâæNoteËäÇÁÇπ:');
            const noteNodes = workflow.nodes.filter(node => node.type === 'Note');
            console.log(`ÊâæÂà∞ ${noteNodes.length} ‰∏™NoteËäÇÁÇπ:`);
            noteNodes.forEach(node => {
                console.log(`  ËäÇÁÇπ ${node.id}: "${node.widgets_values?.[0] || 'empty'}"`);
            });
            
            // Ê£ÄÊü•ÊòØÂê¶ÊúâÂØπNoteËäÇÁÇπÁöÑÂºïÁî®
            console.log('\nüîç Ê£ÄÊü•ËäÇÁÇπÈó¥ÁöÑÂºïÁî®:');
            workflow.nodes.forEach(node => {
                // Ê£ÄÊü•inputs‰∏≠ÊòØÂê¶ÊúâÂØπNoteËäÇÁÇπÁöÑÂºïÁî®
                if (node.inputs) {
                    node.inputs.forEach(input => {
                        if (input.link !== null) {
                            // Êü•ÊâæËøô‰∏™ÈìæÊé•ÊåáÂêëÁöÑËäÇÁÇπ
                            const link = workflow.links.find(l => l[0] === input.link);
                            if (link) {
                                const targetNodeId = link[1];
                                const targetNode = workflow.nodes.find(n => n.id === targetNodeId);
                                if (targetNode && targetNode.type === 'Note') {
                                    console.log(`‚ö†Ô∏è  ËäÇÁÇπ ${node.id} (${node.type}) ÂºïÁî®‰∫ÜNoteËäÇÁÇπ ${targetNodeId}`);
                                }
                            }
                        }
                    });
                }
                
                // Ê£ÄÊü•widgets_values‰∏≠ÊòØÂê¶ÊúâÂØπNoteËäÇÁÇπÁöÑÂºïÁî®
                if (node.widgets_values) {
                    node.widgets_values.forEach((value, index) => {
                        if (typeof value === 'string' && value.includes('#')) {
                            // ÂèØËÉΩÊòØËäÇÁÇπIDÂºïÁî®
                            const nodeIdMatch = value.match(/#(\d+)/);
                            if (nodeIdMatch) {
                                const referencedId = parseInt(nodeIdMatch[1]);
                                const referencedNode = workflow.nodes.find(n => n.id === referencedId);
                                if (referencedNode) {
                                    console.log(`üìù ËäÇÁÇπ ${node.id} (${node.type}) widgets_values[${index}] ÂºïÁî®ËäÇÁÇπ ${referencedId} (${referencedNode.type})`);
                                } else {
                                    console.log(`‚ùå ËäÇÁÇπ ${node.id} (${node.type}) widgets_values[${index}] ÂºïÁî®‰∏çÂ≠òÂú®ÁöÑËäÇÁÇπ ${referencedId}`);
                                }
                            }
                        }
                    });
                }
            });
            
            // Ê£ÄÊü•ÊâÄÊúâÈìæÊé•ÁöÑÊúâÊïàÊÄß
            console.log('\nüîó Ê£ÄÊü•ÈìæÊé•ÊúâÊïàÊÄß:');
            workflow.links.forEach((link, index) => {
                const [linkId, sourceNodeId, sourceSlotIndex, targetNodeId, targetSlotIndex] = link;
                
                const sourceNode = workflow.nodes.find(n => n.id === sourceNodeId);
                const targetNode = workflow.nodes.find(n => n.id === targetNodeId);
                
                if (!sourceNode) {
                    console.log(`‚ùå ÈìæÊé• ${index}: Ê∫êËäÇÁÇπ ${sourceNodeId} ‰∏çÂ≠òÂú®`);
                }
                if (!targetNode) {
                    console.log(`‚ùå ÈìæÊé• ${index}: ÁõÆÊ†áËäÇÁÇπ ${targetNodeId} ‰∏çÂ≠òÂú®`);
                }
                if (sourceNode && targetNode) {
                    console.log(`‚úÖ ÈìæÊé• ${index}: ${sourceNode.type}(${sourceNodeId}) -> ${targetNode.type}(${targetNodeId})`);
                }
            });
        }
        
    } catch (error) {
        console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);
        console.error(error.stack);
    }
}

checkLayneWorkflowNodes().catch(console.error);